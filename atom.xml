<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://fire1000.github.io</id>
    <title>Fly_Fire1000的博客</title>
    <updated>2022-06-29T13:18:07.102Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://fire1000.github.io"/>
    <link rel="self" href="https://fire1000.github.io/atom.xml"/>
    <subtitle>温故而知新</subtitle>
    <logo>https://fire1000.github.io/images/avatar.png</logo>
    <icon>https://fire1000.github.io/favicon.ico</icon>
    <rights>All rights reserved 2022, Fly_Fire1000的博客</rights>
    <entry>
        <title type="html"><![CDATA[《Illustrated C# 2012, 4th Edition》Daniel M. Solis 第25章 其他主题 笔记]]></title>
        <id>https://fire1000.github.io/post/lesslessillustrated-c-2012-4th-editiongreatergreater-daniel-m-solis-di-25-zhang-qi-ta-zhu-ti-bi-ji/</id>
        <link href="https://fire1000.github.io/post/lesslessillustrated-c-2012-4th-editiongreatergreater-daniel-m-solis-di-25-zhang-qi-ta-zhu-ti-bi-ji/">
        </link>
        <updated>2022-06-29T06:06:31.000Z</updated>
        <content type="html"><![CDATA[<p>C#中字符串是不可被修改的。<br>
string类型有以下成员：<br>
<img src="https://fire1000.github.io/post-images/1656482895523.png" alt="" loading="lazy"></p>
<p>StringBuilder类在System.Text命名空间中定义。<br>
StringBuilder对象的字符串是可以修改的。<br>
StringBuilder对象的字符串通过ToString()方法获取。</p>
<p>预定义的简单类型都有一个Parse()和TryParse()静态方法，它可以把字符串转换为这个类型。<br>
Parse()方法遇到不能转换为对应类型的字符串会抛出异常。<br>
TryParse()方法遇到不能转换为对应类型的字符串返回false，它通过out参数输出转换后的数值。</p>
<p>值类型后跟一个问号可以创建这个值类型对应的可空值类型。<br>
可空值类型是一个语法糖，本质上System.Nullable&lt;T&gt;类型的结构，因此可空值类型虽然可以赋值为null，但它仍然是值类型。<br>
可空值类型有两个重要的只读属性HasValue和Value。</p>
<ol>
<li>HasValue是布尔类型，当可空值类型对象为null时，返回false，否则返回true。将可空值类型对象与null进行比较也可以判断它是不是null。</li>
<li>Value是可空值类型对应的值类型，用于读取可空值类型对象的值，当可空值类型对象为null时，会抛出异常。将可空值类型对象强转为对应的值类型，同样可以访问它的值，当为null时，同样会抛出异常。</li>
<li>由结构后跟问号创建的可空值类型，外部只通过Value属性访问它的成员，无法直接访问它的成员。</li>
</ol>
<p>值类型对象可以隐式转换为对应的可空值类型。<br>
相同的可空值类型之间可以互相赋值。</p>
<p>??运算符，称为空接合运算符(null coalescing operator)。当左操作数为null时返回右操作数，否则返回左操作数。</p>
<p>C#支持四种形式的Main()方法，返回值类型可以是void或int，形参存在没有或为string[] args。<br>
Main()方法必须被static修饰。<br>
Main()方法可以是public或private，当声明为private时其他程序集无法访问。</p>
<p>C#支持XML文档注释，支持以下标签：<br>
<img src="https://fire1000.github.io/post-images/1656498142133.png" alt="" loading="lazy"></p>
<p>C#的类和结构支持嵌套。<br>
嵌套类型的声明支持所有5种访问修饰符，嵌套类型的成员的声明的访问修饰符只支持public、internal、private。<br>
嵌套类型的成员与包含这个嵌套类型的类型的成员之间的可访问性如下：<br>
<img src="https://fire1000.github.io/post-images/1656507178152.png" alt="" loading="lazy"><br>
嵌套类型中的this指嵌套类型的对象。</p>
<p>析构函数：</p>
<ol>
<li>一个类只能有一个析构函数。</li>
<li>析构函数不能有参数。</li>
<li>析构函数不能有访问修饰符。</li>
<li>析构函数不能被static修饰。</li>
<li>析构函数不能被显式调用，由GC调用。</li>
</ol>
<p>使用析构函数的原则：</p>
<ol>
<li>不需要时不应该实现析构函数，会严重影响性能。</li>
<li>析构函数应该只释放对象拥有的外部资源。</li>
<li>析构函数不应该访问其他对象，因它们可能已经被销毁。</li>
</ol>
<p>析构函数在C# 3.0之前有时也称为终结器(finalizer)。</p>
<p>因为析构函数不会在超出作用域时及时调用，如果希望尽快释放非托管资源，则应该实现IDisposable接口，通过调用Dispose()方法释放非托管资源。<br>
实现IDisposable接口的类，还应该在析构函数中调用Dispose()方法。</p>
<p>Dispose()方法的编写原则：</p>
<ol>
<li>Dispose()方法最后应该调用GC.SuppressFinalize()方法，通知CLR不要再调用析构函数。</li>
<li>Dispose()方法被多次调用应该是安全的，不会抛出异常。</li>
</ol>
<p>标准dispose模式：实现两个Dispose()方法，一个public，一个protected。protected版本接受一 个布尔参数用于区分是被析构函数调用，还是其他函数调用，具体如下：<br>
<img src="https://fire1000.github.io/post-images/1656508186022.png" alt="" loading="lazy"></p>
<p>C# 4.0为COM编程专门增加了“省略ref”特性，当调用包含ref参数的方法，却不需要接受ref参数的返回值时，实参可以无需使用ref关键字，可以不是变量。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[《Illustrated C# 2012, 4th Edition》Daniel M. Solis 第24章 反射和特性 笔记]]></title>
        <id>https://fire1000.github.io/post/lesslessillustrated-c-2012-4th-editiongreatergreater-daniel-m-solis-di-24-zhang-fan-she-he-te-xing-bi-ji/</id>
        <link href="https://fire1000.github.io/post/lesslessillustrated-c-2012-4th-editiongreatergreater-daniel-m-solis-di-24-zhang-fan-she-he-te-xing-bi-ji/">
        </link>
        <updated>2022-06-28T09:44:10.000Z</updated>
        <content type="html"><![CDATA[<p>有关程序及其类型的数据称为元数据，保存在程序集中。<br>
程序运行时，查看本身或其他程序集元数据的行为称为反射。<br>
使用反射，必须using System.Reflection命名空间。</p>
<p>Type类是一个抽象类，被设计用来包含类型信息。<br>
程序运行时，CLR会为每一个用到的类型，都创建一个从Type派生的类的实例，然后返回这个实例的Type类的引用。<br>
因此每一个类型都对应一个Type类对象。不论一个类型有多少实例，它们都对应同一个Type类对象。<br>
从Type类对象可以获取到对应类型的几乎所有信息：<br>
<img src="https://fire1000.github.io/post-images/1656410112097.png" alt="" loading="lazy"><br>
object类型对象的GetType()方法和typeof运算符都返回一个Type类对象。typeof运算符的参数为类型名。</p>
<p>特性(attribute)允许向程序集添加元数据。<br>
.NET预定了很多特性，支持声明自定义特性。<br>
根据惯例，特性名使用Pascal命名法并且以Attribute后辍结尾。当为目标应用特性时，可以不使用后辍。<br>
特性可以带参数，也可以不带参数：<br>
<img src="https://fire1000.github.io/post-images/1656412500628.png" alt="" loading="lazy"></p>
<p>Obsolete特性标注一个程序结构为过期，在编译时输出一条警告或错误信息。Obsolete特性有两个重载：</p>
<pre><code>[Obsolete(&quot;Use method SuperPrintOut&quot;)]
static void PrintOut(string str)
{ ...
</code></pre>
<p>输出警告信息：</p>
<pre><code>'AttrObs.Program.PrintOut(string)' is obsolete: 'Use method SuperPrintOut'
</code></pre>
<pre><code>[Obsolete(&quot;Use method SuperPrintOut&quot;, true)]
static void PrintOut(string str)
{ ...
</code></pre>
<p>输出错误信息，内容与之前相同。</p>
<p>Conditional特性只能用于方法，参数是一个字符串表示一个编译符号。当编译符号定义时，与普通方法相同。当编译符号未定义时，编译器在程序集中删除所有调用这个方法的代码，但不会删除这个方法的定义。</p>
<p>调用者信息特性：CallerFilePath、CallerLineNumber和CallerMemberName分别用于获取文件路径、代码行数、调用者名称。<br>
调用者信息特性只能用于可选参数，用法如下：<br>
<img src="https://fire1000.github.io/post-images/1656468136596.png" alt="" loading="lazy"></p>
<p>DebuggerStepThrough用于告诉编译器调试时，不进入标注的程序结构内部。<br>
DebuggerStepThrough只能用于类、结构、方法或访问器。</p>
<p>其他重要的预定义特性：<br>
<img src="https://fire1000.github.io/post-images/1656468553549.png" alt="" loading="lazy"></p>
<p>一个结构可以应用多个特性，有两种形式：</p>
<pre><code>[Serializeble]
[MyAtrribute(&quot;Simple class&quot;, &quot;Version 3.57&quot;)]
</code></pre>
<pre><code>[MyAtrribute(&quot;Simple class&quot;, &quot;Version 3.57&quot;), Serializable]
</code></pre>
<p>应用特性时还可以显式标注应用到的目标结构，例如：</p>
<pre><code>[method: MyAttribute(&quot;Prints out a message.&quot;, &quot;Version 3.6&quot;)]
[return: MyAttribute(&quot;This value represents ...&quot;, &quot;Version 2.3&quot;)]
public long Return Setting()
{ ...
</code></pre>
<p>特性的支持以下目标：<br>
<img src="https://fire1000.github.io/post-images/1656470010541.png" alt="" loading="lazy"></p>
<ul>
<li>typevar表示泛型结构的类型参数。</li>
</ul>
<p>assembly和module表示程序集和模块，必须写在任何命名空间之外，通常写在AssemblyInfo.cs文件中。</p>
<p>特性类是派生自System.Atrribute的类。<br>
特性类按惯例以Attribute结尾。<br>
特性类建议声明为密封类。<br>
特性类的public成员只能是字段、属性、构造函数。<br>
特性类必须至少有一个public的构造函数，应用特性就是指定要使用的构造函数，构造函数的实参必须是编译时能确定的值。<br>
特性的构造函数不是在应用特性时调用，应用特性只是将特性与目标关联，并指定需要构造特性时，使用哪个构造函数。<br>
如果特性的构造函数是无参数，以下两种形式等价：</p>
<pre><code>[MyAttr]
class SomeClass ...

[MyAtrr()]
class OtherClass ...
</code></pre>
<p>特性的构造函数支持命名参数。</p>
<p>预定义特性AttributeUsage可以限制特性类使用的目标，用法如下：</p>
<pre><code>[AtrributeUsage(AttributeTarget.Method)]
public sealed class MyAtrributeAttribute : System.Attribute
{ ...
</code></pre>
<p>AttributeUsage的public属性：<br>
<img src="https://fire1000.github.io/post-images/1656474373054.png" alt="" loading="lazy"><br>
AttributeUsage的构造函数接受一个AttributeTarget枚举类型参数用于设置ValidOn属性，枚举之间可以组合：<br>
<img src="https://fire1000.github.io/post-images/1656474480069.png" alt="" loading="lazy"><br>
AttributeUsage的构造函数还接受两个可选的命名参数用于设置Inherited和AllowMutiple属性：</p>
<pre><code>[AtrributeUsage(AttributeTarget.Class, Inherited = false, AllowMultiple = false)]
public sealed class MyAtrributeAttribute : System.Attribute
{ ...
</code></pre>
<p>Type对象的IsDefined()方法可以检测某个特性是否应用于某个类型。<br>
IsDefined()方法接受两个参数，第一个是用于检测的特性类的Type对象，第二个参数是布尔，用于指定是否沿继承树查找这个特性，当为true时表示沿继承树搜索。</p>
<p>Type对象的GetCustomAttributes()方法，返回应用到指定程序结构的特性的数组，返回object数组，需要强转为特性类访问。GetCustomAttributes()方法接受一个布尔参数，用于指定是否沿继承树搜索，当为true时表示是。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[《Illustrated C# 2012, 4th Edition》Daniel M. Solis 第23章 预处理指令 笔记]]></title>
        <id>https://fire1000.github.io/post/lesslessillustrated-c-2012-4th-editiongreatergreater-daniel-m-solis-di-23-zhang-yu-chu-li-zhi-ling-bi-ji/</id>
        <link href="https://fire1000.github.io/post/lesslessillustrated-c-2012-4th-editiongreatergreater-daniel-m-solis-di-23-zhang-yu-chu-li-zhi-ling-bi-ji/">
        </link>
        <updated>2022-06-28T06:44:53.000Z</updated>
        <content type="html"><![CDATA[<p>预处理指令(preprocessor directive)指示编译器如何处理源代码。<br>
C#没有实际的预处理程序，预处理指令由编译器处理。</p>
<p>C#中预处理指令以#开头，#与关键字之间允许存在空格，预处理指令结尾不需要分号。预处理指令之后允许<code>//</code>注释，不能使用<code>/*...*/</code>注释。</p>
<p>C#预处理指令：<br>
<img src="https://fire1000.github.io/post-images/1656399045668.png" alt="" loading="lazy"></p>
<p>#define指令定义一个编译符号，#undef取消定义一个编译符号。编译符号可以是true、false以外的任何标识符。与C/C++不同，C#的编译符号没有值。<br>
#define和#undef指令只能在C#代码之前使用，即源代码开头。<br>
编译符号的作用域仅所处的源文件。编译符号允许重复定义。</p>
<p>#if、#else、#elif、#endif用于条件编译。<br>
#if和#elif指令中可以使用true、false和以下条件，支持圆括号：<br>
<img src="https://fire1000.github.io/post-images/1656399668400.png" alt="" loading="lazy"></p>
<p>诊断指令：</p>
<pre><code>#warning Message
#error Message
</code></pre>
<p>Message是字符串，但不需要被引号包围。<br>
编译器遇到#warning指令输出警告消息，遇到#error指令输出错误消息。</p>
<p>行号指令#line可以改变编译器警告和错误消息报告的行数，笖变编译源文件的文件名，对交互式调试器隐藏一些行，语法如下：<br>
<img src="https://fire1000.github.io/post-images/1656400024269.png" alt="" loading="lazy"></p>
<p>区域指令#region和#end region必须成对出现，允许为一段代码命名，语法如下：</p>
<pre><code>#region Constructors
    MyClass()
    { ... }
    MyClass(string s)
    { ... }
#endregion
</code></pre>
<p>区域指令支持嵌套。<br>
区域指令会被编译器忽略，但可以被源代码工具使用。</p>
<p>#pragma warning指令支持关闭和重新开启警告消息，语法如下：</p>
<ol>
<li><code>#pragma warning disable 618, 414</code>，下一行开始关闭618和414两个警告消息。</li>
<li><code>#pragma warning restore 618</code>，下一行开始重新开启警告消息618。</li>
<li><code>#pragma warning disable</code>，下一行开始关闭所有警告消息。</li>
<li><code>#pragma warning restore</code>，下一行开始重新开启所有警告消息。</li>
</ol>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[《Illustrated C# 2012, 4th Edition》Daniel M. Solis 第22章 异常 笔记]]></title>
        <id>https://fire1000.github.io/post/lesslessillustrated-c-2012-4th-editiongreatergreater-daniel-m-solis-di-22-zhang-yi-chang-bi-ji/</id>
        <link href="https://fire1000.github.io/post/lesslessillustrated-c-2012-4th-editiongreatergreater-daniel-m-solis-di-22-zhang-yi-chang-bi-ji/">
        </link>
        <updated>2022-06-28T06:02:18.000Z</updated>
        <content type="html"><![CDATA[<p>try...catch语句的结构：<br>
<img src="https://fire1000.github.io/post-images/1656396226762.png" alt="" loading="lazy"></p>
<p>BCL定义了许多异常类，每个类对应一种异常，异常类的对象只包含只读属性：<br>
<img src="https://fire1000.github.io/post-images/1656396490758.png" alt="" loading="lazy"></p>
<p>catch子句有三种形式：<br>
<img src="https://fire1000.github.io/post-images/1656396573651.png" alt="" loading="lazy"></p>
<p>catch子句可以包含多个，当异常发生时，从上到下搜索第一个匹配的catch子句并执行。<br>
因此catch子句有两个排序原则：</p>
<ol>
<li>派生类应排在基类之前。</li>
<li>一般catch子句应排在末尾，并且只存在一个。</li>
</ol>
<p>无论是否发生异常finally块都会执行。<br>
<img src="https://fire1000.github.io/post-images/1656396895572.png" alt="" loading="lazy"><br>
即使try块中包含return语句，finally块也会执行：<br>
<img src="https://fire1000.github.io/post-images/1656396976384.png" alt="" loading="lazy"></p>
<p>如果发生异常时，所处try块没有匹配的catch子句捕获异常，会沿调用栈向栈底搜索，尽可能找到一个能捕获异常的try...catch语句：<br>
<img src="https://fire1000.github.io/post-images/1656397202031.png" alt="" loading="lazy"><br>
沿调用栈，找到一个的try...catch语句，不执行，当栈不断弹出，直到try...catch语句所处的帧栈时执行：<br>
<img src="https://fire1000.github.io/post-images/1656397582053.png" alt="" loading="lazy"></p>
<p>throw语句可以显式抛出一个异常：</p>
<pre><code>throw ExceptionObject;
</code></pre>
<p>在catch子句中，throw语句还可以不带异常对象，将这个catch子句捕获的异常再次抛出，语法如下：</p>
<pre><code>throw;
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[《Illustrated C# 2012, 4th Edition》Daniel M. Solis 第21章 命名空间和程序集 笔记]]></title>
        <id>https://fire1000.github.io/post/lesslessillustrated-c-2012-4th-editiongreatergreater-daniel-m-solis-di-21-zhang-ming-ming-kong-jian-he-cheng-xu-ji-bi-ji/</id>
        <link href="https://fire1000.github.io/post/lesslessillustrated-c-2012-4th-editiongreatergreater-daniel-m-solis-di-21-zhang-ming-ming-kong-jian-he-cheng-xu-ji-bi-ji/">
        </link>
        <updated>2022-06-27T22:31:39.000Z</updated>
        <content type="html"><![CDATA[<p>C#编译器编译源代码生成程序集，不论是.dll还是.exe都是程序集，.dll又称为类库。<br>
要使用其他程序集，需要先在编译器中引用。<br>
mscorlib库包含Console类，它总是被引用，VS不把它放在引用列表中。</p>
<p>命名空间是解决类库之间类名冲突的方案。<br>
命名空间可以通过点号，划分成多个层次。<br>
不同源文件，甚至不同程序集中都可以声明相同的命名空间，只要命名空间的成员不重名。<br>
命名空间支持嵌套：<br>
<img src="https://fire1000.github.io/post-images/1656369840372.png" alt="" loading="lazy"><br>
注意：即使嵌套，命名空间之间还是独立，仅using父命名空间，并不能直接访问子命名空间的成员。</p>
<p>using命名空间指令必须放在任何声明之前。<br>
using别名指令支持给一个命名空间或一个类起一个别名。</p>
<p>大部分程序集由一个单独的文件构成，结构如下：<br>
<img src="https://fire1000.github.io/post-images/1656370190744.png" alt="" loading="lazy"><br>
多文件程序集包含一个主模块(primary module)和多个次要模块(secondary modules)，次要模块后辍名为.netmodule，结构如下：<br>
<img src="https://fire1000.github.io/post-images/1656371739947.png" alt="" loading="lazy"></p>
<p>程序集的标识符(identity)由4部分组成：</p>
<ol>
<li>简单名：不包含扩展名的文件名，也称为程序集名或友好名称(friendly name)，如MyProgram。</li>
<li>版本号：由4个整数组成，格式为MayjorVersion.MinorVersion.Build.Revsion，如2.0.345.9。</li>
<li>文化信息：2-5个字符的字符串，代表一种语言和地域，如en-US。</li>
<li>公钥：128字节字符串，是生产程序集的公司唯一的。</li>
</ol>
<p>完全限定名称：由简单名、版本号、文化信息和16字节公钥凭据组成。</p>
<p>强命名(strongly named)程序集有数学签名，数学签名是根据组成程序集的字节序列、简单名、版本号、文化信息、公钥/私钥对散列处理生成的，因此强命名程序集不会被更改。<br>
弱命名的(weakly named)程序集没有数学签名，因此它是不安全的。<br>
在VS中在工程属性中选择签名页，选择Sign the Assembly复选框并输入密钥文件的位置或创建一个新的，编译代码时，编译器生成一个强命名的程序集。</p>
<ul>
<li>命令行工具Strong Name也可以创建强命名程序集，Strong Name是随VS自动安装的。</li>
</ul>
<p>程序集的私有部署：指将程序集复制到一个位置，只要它依赖的文件都在同一目录下，它就能正常工作。这样部署的程序集称为私有程序集，部署方法也称为复制文件(XCopy)部署。<br>
私有程序集可以是强命名也可是弱命名，不需要在注册表中注册，只需要删除它，就卸载了这个程序集。<br>
私有程序集所在的目录，称为应用程序目录。</p>
<p>共享程序集：放到全局程序集缓存(GAC)中的程序集，称为共享程序集，其他程序集也能使用。<br>
只有强命名的程序集可以被添加到GAC中。GAC早期版本只支持.dll，现在也支持.exe。<br>
GAC在Windows中，.NET 4.0之前位于\Windows\Assembly中，.NET 4.0开始位于\Windows\Microsoft.NET\assembly中。</p>
<p>命令行工具gacutil.exe支持将程序集添加到GAC，或从GAC中删除程序集。它的参数：</p>
<ol>
<li>/i表示添加程序集。</li>
<li>/u表示删除程序集。</li>
<li>/l表示列出GAC中的程序集。</li>
</ol>
<p>因为程序集的标识符由4部分组成，所以GAC中的程序集可以有相同的文件名，这被称为并肩执行(side-by-side Execution)。</p>
<p>如果你不想要重新编译程序，又希望程序使用新版本的程序集，那么你可以创建一个配置文件，它可以告诉CLR使用新版本而不是旧版本。配置文件的名称由可执行文件全名(含扩展名)加上扩展名.config组成。配置文件的内容是XML，如何编写超出了本书的范围。<br>
<img src="https://fire1000.github.io/post-images/1656386988159.png" alt="" loading="lazy"></p>
<p>延迟签名(delayed signing)：因为公司不希望它的公钥/私钥，被不可靠的人拿到，伪装成公司的程序发布。所以强命名通常在开发末尾进行。但是弱命名的程序集又无法被添加到GAC，对开发人员造成影响，延迟签名又称为部分签名(partial signing)用于解决这个问题，方法如下：<br>
<img src="https://fire1000.github.io/post-images/1656389861886.png" alt="" loading="lazy"><br>
将延迟签名的程序员添加到GAC，还需要取消这个程序员在这台机器上的签名确认，类似以下代码即可：</p>
<pre><code>sn -vr MyAssemly.dll
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[《Illustrated C# 2012, 4th Edition》Daniel M. Solis 第20章 异步编程 笔记]]></title>
        <id>https://fire1000.github.io/post/lesslessillustrated-c-2012-4th-editiongreatergreater-daniel-m-solis-di-20-zhang-yi-bu-bian-cheng-bi-ji/</id>
        <link href="https://fire1000.github.io/post/lesslessillustrated-c-2012-4th-editiongreatergreater-daniel-m-solis-di-20-zhang-yi-bu-bian-cheng-bi-ji/">
        </link>
        <updated>2022-06-23T09:40:10.000Z</updated>
        <content type="html"><![CDATA[<h2 id="线程">线程</h2>
<p>启动程序时，系统会在内存中创建一个进程，进程是运行程序的资源的集合，包含虚地址空间、文件句柄等。<br>
在进程内部，系统会创建一个线程，从Main()方法开始执行。</p>
<p>默认情况下，一个进程只包含一个线程。<br>
一个线程可以派生出其他线程，因此一个进程可以包含多个线程，这些线程共用这个进程的资源。<br>
系统为处理器执行规划的单位是线程，而不是进程。</p>
<p>System.Diagnostics命名空间中的Stopwatch类，可以用来测量一段代码执行的时间。</p>
<pre><code>Stopwatch sw = new Stopwatch();
sw.Start();
// todo...
Console.WriteLine(sw.Elapsed.TotalMilliseconds);
</code></pre>
<h2 id="asyncawait">async/await</h2>
<p>C# 5.0引入构建异步方法的新特性：async/await，示例：<br>
<img src="https://fire1000.github.io/post-images/1655983871884.png" alt="" loading="lazy"><br>
上面例子的执行流程：</p>
<ol>
<li>正常执行，直到在async方法中，遇到await表达式：wb.DownloadStringTaskAsync()。</li>
<li>因为wb.DownloadStringTaskAsync()会创建一个新的线程，所以async方法中后续代码都在这个新创建的线程中执行。(为了便于区分，将之前的执行线程称为主线程，新创建的线程称为子线程。下同)当子线程创建完毕，返回一个占位符给主线程，这里是Task&lt;int&gt;类型的对象t1和t2。
<ul>
<li>如果await表达式不会创建一个新的线程，那么会继续正常执行，就像await关键字不存在一样。</li>
</ul>
</li>
<li>主线程与两个子线程同时执行。</li>
<li>主线程遇到t1.Result。判断返回t1的async方法，在它对应的子线程中是否执行完毕。如果执行完毕，则t1.Result获取async方法的返回值。如果未执行完毕，则主线程挂起，直到t1对应async方法执行完毕，再从t1.Result获取async方法的返回值。
<ul>
<li>async方法执行完毕时，它对应的子线程自行销毁。</li>
</ul>
</li>
<li>t2.Result的流程与t1.Result相同。</li>
</ol>
<p>async方法支持三种返回值类型：Task&lt;T&gt;、Task、void。</p>
<ol>
<li>返回Task&lt;T&gt;的async方法，需要return一个T类型的值。</li>
<li>返回Task、void的async方法，不需要return任何值，随使return了某个值也会被忽略。</li>
</ol>
<p>Thread.Sleep()方法可以挂起当前的线程，参数以毫秒为单位。</p>
<p>await表达式中，await修饰的表达式必须是awaitable类型的对象。<br>
awaitable类型包含GetAwaiter()方法，返回一个awaiter类型对象。<br>
awaiter类型对象包含以下成员：</p>
<pre><code>bool IsCompleted {get;};
void OnCompleted(Action);
</code></pre>
<p>awaiter类型对象还包含<code>void GetResult();</code>或<code>T GetResult();</code>(T为任意类型)。</p>
<p>Task类(包含泛型版本，下同)是awaitable类型，因此不需要手动创建awaitable类型。<br>
Task.Run()方法返回一个Task类对象。它创建一个子线程，执行作为参数的委托，它的重载如下：<br>
<img src="https://fire1000.github.io/post-images/1656231584367.png" alt="" loading="lazy"></p>
<p>System.Threading.Tasks命名空间中，CancellationToken和CancellationTokenSource类用于取消一个正在执行的async方法，用法如下：</p>
<ol>
<li>首先实例化一个CancellationTokenSource对象，通过它的Token属性获得一个CancellationToken对象。</li>
<li>将这个CancellationToken对象传递给async方法，在方法内部不断手动检测它的IsCancellationRequested属性，如果为false则继续执行，如果为true则取消方法，即return。</li>
<li>调用CancellationTokenSource对象的Cancel()方法，会将从它获取的CancellationToken对象的IsCancellationRequested属性置为true，从而达到取消async方法的目的。</li>
</ol>
<ul>
<li>注意：IsCancellationRequested属性一旦被置为true，就不能再修改，因此CancellationToken对象是一次性的。</li>
</ul>
<p>在async方法中，当使用try..catch语句捕获到await表达式中的异常时，这个async方法返回的Task类对象的Status属性为RanToCompletion，表示执行完毕，IsFaulted属性为False，表示没有未处理的异常。</p>
<p>阻塞主线程，等待async方法执行完毕：</p>
<ol>
<li>async方法返回的Task类对象的Wait()方法可以阻塞主线程，直到对应的async方法执行完毕。效果类似于访问它的Result属性，只是不返回一个值。</li>
<li>Task类还提供了两个静态方法WaitAll()和WaitAny()，参数是Task类数组，WaitAll()用于阻塞主线程，直到所有数组元素对应的async方法执行完毕，WaitAny()则用于阻塞主线程，直到任意一个数组元素对应的async方法执行完毕。</li>
</ol>
<p>WaitAll()和WaitAny()方法还提供以下重载，用于接收取消信号和设置超时的处理：<br>
<img src="https://fire1000.github.io/post-images/1656295904070.png" alt="" loading="lazy"></p>
<p>创建一个子线程，直到目标async方法执行完毕，才开始执行：Task类为此提供了两个静态方法WhenAll()和WhenAny()，参数是Task类数组，WhenAll()用于所有数组元素对应的async方法都执行完毕才开始执行，WaitAny()则用于任意一个数组元素对应的async方法执行完毕就开始执行。</p>
<ul>
<li>WhenAll()和WhenAny()方法必须使用await修饰。</li>
</ul>
<p>Task.Delay()方法，用于阻塞调用它的async方法所处的线程，参数以毫秒为单位，提供以下重载：</p>
<ul>
<li>Task.Delay()方法必须使用await修饰。<br>
<img src="https://fire1000.github.io/post-images/1656296534286.png" alt="" loading="lazy"></li>
</ul>
<p>WPF程序从消息泵获取用户输入。因此，如果处理用户输入的时间过长，程序会卡住，用户在程序卡住时的全部操作，会在程序恢复时，一瞬间完成。</p>
<p>Task.Yield()方法，创建一个子线程，将async方法的后续代码(直到下一个会创建线程的await表达式之前)都放到这个线程中执行。</p>
<ul>
<li>Task.Yield()方法必须使用await修饰。</li>
</ul>
<p>async方法支持Lambda表达式，需要在表达式前添加async关键字。</p>
<h2 id="backgroundworker类">BackgroundWorker类</h2>
<p>BackgroundWorker类的对象用于为一段目标代码创建一个后台线程，当目标代码执行完毕，或提前退出时，销毁这个线程：<br>
<img src="https://fire1000.github.io/post-images/1656316572502.png" alt="" loading="lazy"></p>
<p>BackgroundWorker类的用法：</p>
<ol>
<li>创建一个BackgroundWorker类的对象。</li>
<li>为它的WorkerReportsProgress和WorkSupportsCancellation属性赋值。
<ol>
<li>WorkerReportsProgress表示用户是否可以调用它的ReportProgress()方法报告目标代码执行进度。</li>
<li>WorkSupportsCancellation表示用户是否可以调用它的CancelAsync()方法，使目标代码提前退出。</li>
</ol>
</li>
<li>为它的三个事件DoWork、ProgressChanged、RunWorkerCompleted关联方法。
<ol>
<li>当用户调用它的RunWorkerAsync()方法时，这个方法会创建一个线程，并触发DoWork事件。通常不会在它的IsBusy属性为true时调用RunWorkerAsync()方法，因为这表示已经存在创建的线程。DoWork事件关联的方法就是目标代码。</li>
<li>在目标代码中，通常会调用BackgroundWorker类对象的ReportProgress()方法报告进度。ReportProgress()方法会触发它的ProgressChanged事件。</li>
<li>在目标代码中，还应该不断检查CancellationPending属性，当这个属性为true时及时return。</li>
<li>当目标代码return后，RunWorkerCompleted事件会触发，在这个事件关联的方法中，通常也会检查CancellationPending属性，以确定目标代码是执行完毕，还是提前退出。在这个事件关联的方法执行完毕后，线程会自行销毁。</li>
</ol>
</li>
<li>调用它的RunWorkerAsync()方法，开始执行目标代码。</li>
<li>在目标代码执行过程中，可以随时调用BackgroundWorker类对象的CancelAsync()方法，这个方法会使得它的CancellationPending属性为true，从而使得目标代码提前退出。</li>
</ol>
<h2 id="并行库task-parellel-library">并行库(Task Parellel Library)</h2>
<p>在System.Threading.Tasks命名空间中提供了Parallel.For和Parallel.ForEach两个并行循环。</p>
<p>Parallel.For有12个重载，最简单的用法如下：</p>
<pre><code>Parallel.For(0, 15, i =&gt; Console.WriteLine(&quot;The square of {0} is {1}&quot;, i, i * i));
</code></pre>
<ul>
<li>第一个参数是起始索引，第二参数比最后一个索引大1，第三个参数是Action委托。</li>
<li>注意：因为是并行执行的，所以不保证迭代顺序。</li>
</ul>
<p>Parallel.ForEach也有相当多的重载，最简单的用法如下：</p>
<pre><code>string[] squares = new string[] {&quot;We&quot;, &quot;hold&quot;, &quot;these&quot;, &quot;truths&quot;, &quot;to&quot;, &quot;be&quot;, &quot;self-evident&quot;, &quot;that&quot;, &quot;all&quot;, &quot;men&quot;, &quot;are&quot;, &quot;created&quot;, &quot;equal&quot;};
Parallel.ForEach(squares, i =&gt; Console.WriteLine(string.Format(&quot;{0} has {1} letters&quot;, i, i.Length)));
</code></pre>
<ul>
<li>与Parallel.For相同，Parallel.ForEach也不保证迭代顺序。</li>
</ul>
<h2 id="beigninvoke和endinvoke">BeignInvoke和EndInvoke</h2>
<p>委托对象的BeignInvoke()方法可以创建一个线程，在这个线程中调用委托的调用列表中的函数。<br>
BeignInvoke()返回一个AsyncResult对象的IAsyncResult接口引用，IAsyncResult接口的IsCompleted属性可以检查委托是否执行完毕。<br>
BeignInvoke()的前几个参数对应调用委托的形参，最后两个参数依次为callback和state。callback为AsyncCallBack委托类型，接收一个IAsyncResult类型参数返回void。callback在调用委托执行完毕时调用。state参数是object类型，会赋值给callback接收到IAsyncResult类型参数的AsyncState属性，用于传递信息。<br>
<img src="https://fire1000.github.io/post-images/1656338839347.png" alt="" loading="lazy"></p>
<p>委托对象的EndInvoke()方法与BeignInvoke()对应，接收一个BeignInvoke()返回IAsyncResult类型参数，返回BeignInvoke()调用委托的返回值，并清理线程。如果调用EndInvoke()方法时，调用未执行完毕，则挂起EndInvoke()方法所处的线程，直到调用委托执行完毕。<br>
EndInvoke()方法还可以返回委托形参列表中的ref和out参数，只要在EndInvoke()的实参列表中，按相同的顺序排列，并使用对应的ref和out，排列在IAsyncResult类型参数之前。</p>
<p>每一个BeignInvoke()方法调用都必须对应一个EndInvoke()方法调用。</p>
<h2 id="异步编程模式">异步编程模式</h2>
<p>异步编程通常有三种模式：<br>
<img src="https://fire1000.github.io/post-images/1656339885607.png" alt="" loading="lazy"></p>
<p>等待一直到完成(wait-until-done)，与async方法相似，原始线程发起异步方法后，进行一些其他处理。然后检查异步方法是否执行完毕，如果未执行完毕，则阻塞原始线程，直到它执行完毕。</p>
<p>轮询(polling)，原始线程发起异步方法后，定期检查异步方法是否执行完毕，如果未执行完毕，就去处理其他事情，直到它执行完毕才继续。</p>
<p>回调(callback)，原始线程发起异步方法后，就不管异步方法了。直到异步方法执行完毕，在EndInvoke清理线程之前，调用回调方法。</p>
<h2 id="计时器">计时器</h2>
<p>System.Threading命名空间中的Timer类，它由系统的线程池定期开启线程执行给定的方法。调用的方法必须是TimerCallback委托类型，对应的方法形式为<code>void TimerCallback( object state)</code>。<br>
Timer类最常用的构造函数为：</p>
<pre><code>Timer(TimerCallback callback, object state, uint dueTime, uint period)
</code></pre>
<ul>
<li>callback为定期调用的方法。</li>
<li>state是传递给callback的参数。</li>
<li>dueTime为第一次调用时间，设置为0会立刻调用，设置为Timeout.Infinite，则计时器不会工作，即callback一次也不会被调用。</li>
<li>period为两次调用之间的时间间隔，如果设置Timeout.Infinite，则callback只调用一次。</li>
</ul>
<p>.NET BCL还提供了其他的计时器，如System.Windows.Forms.Timer、System.Timer.Timer等。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[《Illustrated C# 2012, 4th Edition》Daniel M. Solis 第19章 LINQ 笔记]]></title>
        <id>https://fire1000.github.io/post/lesslessillustrated-c-2012-4th-editiongreatergreater-daniel-m-solis-di-19-zhang-linq-bi-ji/</id>
        <link href="https://fire1000.github.io/post/lesslessillustrated-c-2012-4th-editiongreatergreater-daniel-m-solis-di-19-zhang-linq-bi-ji/">
        </link>
        <updated>2022-06-23T01:13:49.000Z</updated>
        <content type="html"><![CDATA[<h2 id="linq概述">LINQ概述</h2>
<p>LINQ，读作link，语言集成查询(Language Integrated Query)。<br>
对一种数据源类型实现LINQ查询的代码模块，称为LINQ提供程序(provider)。<br>
<img src="https://fire1000.github.io/post-images/1655947196032.png" alt="" loading="lazy"></p>
<p>匿名类型(anonymous type)的语法：<br>
<img src="https://fire1000.github.io/post-images/1655947627367.png" alt="" loading="lazy"><br>
匿名类型只能在函数体中使用。<br>
匿名类型的成员是只读的，无法修改。<br>
如果将匿名类型对象赋值给一个变量，则这个变量只能使用var声明。</p>
<p>匿名类型的成员初始化语句有三种形式：赋值形式、成员访问表达式、标识符：<br>
<img src="https://fire1000.github.io/post-images/1655947864488.png" alt="" loading="lazy"><br>
在赋值形式中，赋值运算符两边的标识符允许重名。</p>
<pre><code>var student = new {Age = Age, Name = Other.Name, Major = Major};
</code></pre>
<p>如果编译器遇到相同的匿名类型(参数名、推断类型、排列顺序都相同)，会复用这个类型，不会创建新的类型。</p>
<p>LINQ查询有两种形式的语法：方法语法(method syntax)和查询语法(query synatx)。<br>
方法语法使用标准的方法调用。方法语法是命令式(imperative)的，指明查询方法调用的顺序。<br>
查询语法和SQL语句相似。查询语法是声明式(declarative)的，只描述要返回的东西。<br>
查询语法在编译时，被编译器翻译为方法调用，因此两者性能上没有差异。但方法语法还提供了一些查询语法没有的功能。</p>
<p>LINQ查询返回的结果称为查询变量，查询变量有两种：可枚举类型(IEnumerable&lt;T&gt;)和标量(scalar)，支持var关键字由编译器推断。<br>
可枚举类型的查询变量：</p>
<ol>
<li>访问查询变量时，才进行查询。每次访问都重新查询</li>
<li>查询之前，如果数据有更新，查询会使用最新的数据。</li>
</ol>
<p>标量的查询变量，立即查询并保存查询结果。</p>
<h2 id="查询表达式">查询表达式</h2>
<p>查询表达式的结构：<br>
<img src="https://fire1000.github.io/post-images/1655952723134.png" alt="" loading="lazy"></p>
<p>from子句的语法：</p>
<pre><code>from Type Item in Items
</code></pre>
<ul>
<li>Type是元素类型。Type是可选的，编译器可以自行推断。</li>
<li>Item是迭代变量</li>
<li>Items是要查询的集合，必须是可枚举类型。</li>
</ul>
<p>与foreach语句不同，from子句不指定集合中的项出现的顺序。</p>
<p>from子句示例：<br>
<img src="https://fire1000.github.io/post-images/1655953390719.png" alt="" loading="lazy"><br>
from子句可以同时存在多个：<br>
<img src="https://fire1000.github.io/post-images/1655955080067.png" alt="" loading="lazy"></p>
<p>from子句，可以后跟任意个join子句：<br>
<img src="https://fire1000.github.io/post-images/1655953646555.png" alt="" loading="lazy"><br>
join子句的语法：</p>
<pre><code>join Identifier in Collection2 on Field1 equals Field2
</code></pre>
<ul>
<li>注意：使用equals关键字，而不是==。</li>
</ul>
<p>join子句用于联结多个集合，创建一个临时的新集合。</p>
<p>let子句可以声明一个变量，语法如下：</p>
<pre><code>let Identifier = Expression
</code></pre>
<p>let子句示例：<br>
<img src="https://fire1000.github.io/post-images/1655956281607.png" alt="" loading="lazy"></p>
<p>where子句可以筛选集合中的项，语法如下：</p>
<pre><code>where BooleanExpression
</code></pre>
<p>where子句示例：<br>
<img src="https://fire1000.github.io/post-images/1655956677842.png" alt="" loading="lazy"></p>
<p>orderby子句用于排序，默认为升序，可以使用ascending和descending关键字显式设置为升序和降序，语法如下：<br>
<img src="https://fire1000.github.io/post-images/1655956848032.png" alt="" loading="lazy"><br>
orderby子句示例：<br>
<img src="https://fire1000.github.io/post-images/1655957268703.png" alt="" loading="lazy"></p>
<p>select...group子句由select子句和group...by子句组成，其中group...by子句是可选的。select子句用于拣选结果，group...by子句用于分组，语法如下：</p>
<pre><code>select Expression
group Expression1 by Expression2
</code></pre>
<p>select子句与匿名类型数组示例：<br>
<img src="https://fire1000.github.io/post-images/1655960346499.png" alt="" loading="lazy"><br>
group...by子句示例：<br>
<img src="https://fire1000.github.io/post-images/1655960763173.png" alt="" loading="lazy"><br>
group...by子依据键(key)分组，返回集合的集合：<br>
<img src="https://fire1000.github.io/post-images/1655960827140.png" alt="" loading="lazy"></p>
<p>into子句可以延续查询，为查询的一部分结果赋予一个名字，在查询的另一部分中使用，语法如下：<br>
<img src="https://fire1000.github.io/post-images/1655960973993.png" alt="" loading="lazy"><br>
into子句示例：<br>
<img src="https://fire1000.github.io/post-images/1655961008187.png" alt="" loading="lazy"></p>
<h2 id="标准查询运算符">标准查询运算符</h2>
<p>标准查询运算符是系列API，被查询的对象必须实现IEnumerable&lt;T&gt;接口，称为序列。</p>
<p>标准查询运算符共47个：<br>
<img src="https://fire1000.github.io/post-images/1655964590361.png" alt="" loading="lazy"></p>
<p>标准查询运算符在System.Linq.Enumerable类中声明，是IEnumerable&lt;T&gt;泛型类的扩展方法。</p>
<p>查询表达式与标准查询运算符可以组合使用：<br>
<img src="https://fire1000.github.io/post-images/1655964962760.png" alt="" loading="lazy"></p>
<p>标准查询运算符中的一些还支持接受泛型委托作为参数：<br>
<img src="https://fire1000.github.io/post-images/1655965110323.png" alt="" loading="lazy"></p>
<p>LINQ还预定了两套泛型委托类型：Func委托和Action委托，各有17个成员，作为标准查询运算符参数的泛型委托类型。<br>
<img src="https://fire1000.github.io/post-images/1655965372038.png" alt="" loading="lazy"><br>
<img src="https://fire1000.github.io/post-images/1655965377200.png" alt="" loading="lazy"></p>
<h2 id="linq-to-xml">LINQ to XML</h2>
<p>标记标签不是文档的数量，是关于数据的数据，称为元数据。</p>
<p>元素是XML的基本要素，元素通过标签划分，元素的数据在开始和关闭标签之间。</p>
<p>XML的标签有两种形式：<br>
<img src="https://fire1000.github.io/post-images/1655966568214.png" alt="" loading="lazy"></p>
<p>XML是树状结构，必须有一个根元素。<br>
与HTML不同，XML的标签区分大小写。<br>
XML的特性是键/值对，值必须包含在引号内(单引号、双引号均可)。<br>
与HTML不同，XML中多个空间不会合并为一个空格。</p>
<p>LINQ to XML提供了一些类，其中最重要的是XElement、XAttribute和XDocument：<br>
<img src="https://fire1000.github.io/post-images/1655967079991.png" alt="" loading="lazy"><br>
图中的类除了XAttribute以外，都从XNode类继承。</p>
<p>创建、保存、加载、打印XML示例：<br>
<img src="https://fire1000.github.io/post-images/1655967440547.png" alt="" loading="lazy"></p>
<p>查询XML的方法：<br>
<img src="https://fire1000.github.io/post-images/1655967639730.png" alt="" loading="lazy"><br>
查询XML示例：<br>
<img src="https://fire1000.github.io/post-images/1655969019095.png" alt="" loading="lazy"></p>
<p>操作XML的方法：<br>
<img src="https://fire1000.github.io/post-images/1655969092176.png" alt="" loading="lazy"><br>
操作XML示例：<br>
<img src="https://fire1000.github.io/post-images/1655969354370.png" alt="" loading="lazy"></p>
<p>在XElement构造函数中包含XAttribute构造函数可以添加特性。<br>
XAttribute构造函数有两种形式，一种是接受name和value，另一种是接受XAttribute的引用。<br>
在XElement节点调用Attribute()方法，传递特性名可以获取特性。<br>
XAttribute类的Remove()方法可以移除特性。<br>
在XElement节点，调用SetAttributeValue()方法，将某个特性的值设置为null，同样可以移除这个特性。SetAttributeValue()方法还可以改变一个特性的值。</p>
<p>XComment节点是注释。<br>
XDeclaration节点是XML的声明，包含XML版本号、字符编码和是否依赖外部引用。<br>
XProcessingInstruction用于提供XML如何被使用和翻译的额外数据，如关联一个样式表。<br>
XComment、XDeclaration、XProcessingInstruction使用示例：<br>
<img src="https://fire1000.github.io/post-images/1655970171641.png" alt="" loading="lazy"></p>
<p>LINQ查询XML示例如下：<br>
<img src="https://fire1000.github.io/post-images/1655970482026.png" alt="" loading="lazy"><br>
<img src="https://fire1000.github.io/post-images/1655970487172.png" alt="" loading="lazy"></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[《Illustrated C# 2012, 4th Edition》Daniel M. Solis 第18章 枚举器与迭代器 笔记]]></title>
        <id>https://fire1000.github.io/post/lesslessillustrated-c-2012-4th-editiongreatergreater-daniel-m-solis-di-18-zhang-mei-ju-qi-yu-die-dai-qi-bi-ji/</id>
        <link href="https://fire1000.github.io/post/lesslessillustrated-c-2012-4th-editiongreatergreater-daniel-m-solis-di-18-zhang-mei-ju-qi-yu-die-dai-qi-bi-ji/">
        </link>
        <updated>2022-06-22T09:08:29.000Z</updated>
        <content type="html"><![CDATA[<p>foreach只支持遍历可枚举类型(enumerable type或enumerable)。<br>
可枚举类型指拥有GetEnumerator()方法的类型，GetEnumerator()返回枚举器(enumerator)对象。枚举器可以依次返回集合中的项。<br>
foreach从可枚举类型中通过GetEnumerator()方法获取枚举器，再将枚举器返回的每一项作为迭代变量(iteration variable)。</p>
<p>枚举器是实现了IEnumerator接口或它的泛型版本的类型的对象。<br>
IEnumerator接口包含Current属性和MoveNext()、Reset()方法：<br>
<img src="https://fire1000.github.io/post-images/1655890295433.png" alt="" loading="lazy"><br>
枚举器的初始状态，位置为-1，即集合的第一个元素之前。<br>
访问枚举器时，总是先调用MoveNext()，再访问Current。<br>
当枚举器的位置在最后一个元素之后，MoveNext()返回false，否则返回true。</p>
<p>使用foreach时，编译器生成与以下代码相似的CIL代码：<br>
<img src="https://fire1000.github.io/post-images/1655890685365.png" alt="" loading="lazy"></p>
<p>IEnumerable接口只有一个成员：GetEnumerator()方法。因此实现了IEnumerable接口的类型为可枚举类型。</p>
<ul>
<li>注意：只要拥有GetEnumerator()方法，不实现IEnumerable接口，也是可枚举类型。</li>
</ul>
<p>与IEnumerator接口一样，IEnumerable接口也存在泛型版本。</p>
<p>非泛型的IEnumerator接口，Current属性返回object类型，因此不是类型安全的。泛型的IEnumerator接口，Current属性返回实际类型，是类型安全的，推荐使用。</p>
<p>泛型的IEnumerator接口不仅实现了非泛型的IEnumerator接口，还实现了IDisposable接口：<br>
<img src="https://fire1000.github.io/post-images/1655892779301.png" alt="" loading="lazy"><br>
泛型的IEnumerable接口实现了非泛型的IEnumerable接口：<br>
<img src="https://fire1000.github.io/post-images/1655892852477.png" alt="" loading="lazy"></p>
<p>C# 2.0还引入了迭代器(iterator)。<br>
依据返回值的类型，迭代器可以生成枚举器或可枚举类型。<br>
<img src="https://fire1000.github.io/post-images/1655897299574.png" alt="" loading="lazy"><br>
yield return语句指定集合的下一项。<br>
yield break语句指定集合没有下一项。<br>
使用迭代器需要引入System.Collections.Generic命名空间。<br>
迭代器生成的枚举器没有实现Reset()方法，调用Reset()方法时抛出System.NotSupportedException异常。<br>
迭代器生成的枚举器是包含4个状态的状态机：<br>
<img src="https://fire1000.github.io/post-images/1655897874811.png" alt="" loading="lazy"></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[《Illustrated C# 2012, 4th Edition》Daniel M. Solis 第17章 泛型 笔记]]></title>
        <id>https://fire1000.github.io/post/lesslessillustrated-c-2012-4th-editiongreatergreater-daniel-m-solis-di-17-zhang-fan-xing-bi-ji/</id>
        <link href="https://fire1000.github.io/post/lesslessillustrated-c-2012-4th-editiongreatergreater-daniel-m-solis-di-17-zhang-fan-xing-bi-ji/">
        </link>
        <updated>2022-06-22T06:55:36.000Z</updated>
        <content type="html"><![CDATA[<p>泛型(generic)是C# 2.0引入的。<br>
泛型允许我们声明类型参数化(type-parameterized)的代码。<br>
泛型不是类型，是类型的模板。<br>
C#提供5种泛型：类、结构、接口、委托、方法。</p>
<p>泛型声明中的T是占位符，在编译时替换为实际类型，其中T称为类型参数(type parameter)，实际类型称为类型实参(type argument)。</p>
<p>将泛型类型中的占位符替换为实际类型后，得到的类型称为构造类型(constructed type)。</p>
<p>类型参数可以受约束(constrain)，符合约束的类型参数称为未绑定的类型参数(unbounded type parameter)。<br>
泛型中，约束通过where子句给出：</p>
<pre><code>where TypeParam : constraint, constraint, ....
</code></pre>
<p>约束有5种类型：<br>
<img src="https://fire1000.github.io/post-images/1655882211039.png" alt="" loading="lazy"><br>
如果同时存在多种约束，必须按以下形式给出：<br>
<img src="https://fire1000.github.io/post-images/1655882322015.png" alt="" loading="lazy"></p>
<p>泛型方法可以在泛型或非泛型的类型中声明。<br>
泛型方法调用时，编译器可以推断实际类型，因此在调用时，可以省略类型参数和尖括号。<br>
扩展方法支持泛型。</p>
<p>非泛型类型可以实现泛型接口。<br>
一个类型可以重复实现相同的泛型接口，但泛型接口的类型实参必须不存在相同类型的可能性。</p>
<p>泛型可以与非泛型重名。</p>
<p>可变性(variance)分为三种：协变(convariance)、逆变(contravariance)和不变(invariance)。<br>
当泛型委托的类型形参使用out修饰，表示这个类型形参只作为返回值类型，则这个泛型委托支持协变，即支持将类型实参为派生类的委托对象赋值给类型实参为基类的委托对象。<br>
当泛型委托的类型形参使用in修饰，表示这个类型形参只作为形参类型，则这个泛型委托支持逆变，即支持将类型实参为基类的委托对象赋值给类型实参为派生类的委托对象。<br>
与泛型委托相同，泛型接口也通过out和in修饰符支持协变和逆变。<br>
不使用out和in修饰的类型参数称为不变，不支持协变和逆变。</p>
<p>当赋值运算符左操作数为泛型委托，右操作数为函数时，不需要out和in修饰符，只要类型形参满足协变和逆变的条件(协变：只作为返回值类型。逆变：只作为形参类型。)，就支持协变和逆变：<br>
<img src="https://fire1000.github.io/post-images/1655885505456.png" alt="" loading="lazy"></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[《Illustrated C# 2012, 4th Edition》Daniel M. Solis 第16章 转换 笔记]]></title>
        <id>https://fire1000.github.io/post/lesslessillustrated-c-2012-4th-editiongreatergreater-daniel-m-solis-di-16-zhang-zhuan-huan-bi-ji/</id>
        <link href="https://fire1000.github.io/post/lesslessillustrated-c-2012-4th-editiongreatergreater-daniel-m-solis-di-16-zhang-zhuan-huan-bi-ji/">
        </link>
        <updated>2022-06-22T04:39:39.000Z</updated>
        <content type="html"><![CDATA[<p>隐式转换指编译器依据上下文自动进行的转换。<br>
C#中无符号整数类型使用零扩展(zero extension)，有符号整数类型使用符号扩展(sign extension)。<br>
所有类型都可以隐式转换为object类型。<br>
所有值类型都可以隐式转换为System.ValueType类型。</p>
<p>数字类型之间的转换：<br>
<img src="https://fire1000.github.io/post-images/1655873308577.png" alt="" loading="lazy"><br>
数字类型之间的隐式转换：<br>
<img src="https://fire1000.github.io/post-images/1655873440475.png" alt="" loading="lazy"></p>
<p>checked运算符和checked语句可以检查类型转换时是否发生溢出，当溢出时抛出OverflowException异常。C#默认不做溢出检测。<br>
checked和unchecked运算符用于表达式，checked和unchecked语句用于块。<br>
checked检测溢出，unchecked不检测溢出：<br>
<img src="https://fire1000.github.io/post-images/1655873805046.png" alt="" loading="lazy"><br>
<img src="https://fire1000.github.io/post-images/1655873931343.png" alt="" loading="lazy"><br>
checked和unchecked语句之间可以嵌套。</p>
<p>数字类型之间的显式转换：<br>
<img src="https://fire1000.github.io/post-images/1655876435259.png" alt="" loading="lazy"><br>
<img src="https://fire1000.github.io/post-images/1655876439453.png" alt="" loading="lazy"><br>
<img src="https://fire1000.github.io/post-images/1655876443171.png" alt="" loading="lazy"><br>
<img src="https://fire1000.github.io/post-images/1655876447648.png" alt="" loading="lazy"><br>
<img src="https://fire1000.github.io/post-images/1655876451648.png" alt="" loading="lazy"><br>
<img src="https://fire1000.github.io/post-images/1655876454975.png" alt="" loading="lazy"></p>
<p>引用转换改变对象内存中数据的可见性。<br>
引用类型之间的隐式转换：<br>
<img src="https://fire1000.github.io/post-images/1655876800160.png" alt="" loading="lazy"><br>
<img src="https://fire1000.github.io/post-images/1655876805007.png" alt="" loading="lazy"></p>
<p>引用类型之间的显式转换：</p>
<ol>
<li>存在从object到任何引用类型的显式转换。</li>
<li>存在从基类到它的派生类的显式转换。</li>
</ol>
<p>引用类型之间的显式转换不一定都是有效的，无效的引用转换会抛出InvalidCastException异常，但不会导致编译错误。<br>
值为null的引用的显式转换总是有效的。</p>
<p>装箱(boxing)是一种隐式转换。它在堆上创建值类型的副本，然后返回这个副本的引用。<br>
<img src="https://fire1000.github.io/post-images/1655879186162.png" alt="" loading="lazy"><br>
拆箱(unboxing)是一种显式转换。它返回装箱在堆上创建的副本的原始类型的值。尝试将一个值拆箱为非原始类型，抛出InvalidCastException异常。<br>
<img src="https://fire1000.github.io/post-images/1655879463752.png" alt="" loading="lazy"></p>
<p>用户可以通过implicit和explicit关键字和public static修饰符自定义转换。但存在以下约束：</p>
<ol>
<li>只以为类和结定自定义转换</li>
<li>不能重定义标准隐式或显式转换。</li>
<li>对于源类型S和目标类型T：
<ol>
<li>S和T必须是不同类型。</li>
<li>S和T不能有继承关系。</li>
<li>S和T不能是接口或object类型。</li>
<li>转换运算符必须是S或T的成员。</li>
</ol>
</li>
</ol>
<p>一次完整的转换最多三个步骤：<br>
<img src="https://fire1000.github.io/post-images/1655879943707.png" alt="" loading="lazy"></p>
<ul>
<li>自定义转换至多出现一次。</li>
</ul>
<p>is运算符可以检测一次转换是否会成功，会成功返回true，否则返回false。<br>
is运算符只能用于标准引用转换、装箱和拆箱，不能用于自定义转换。</p>
<p>as运算符同样可以检测一次转换是否会成功，成功时返回目标类型的引用，否则返回null。<br>
因为as运算符的目标类型限定为引用类型，所以只用于标准引用转换和装箱，不能用于到值类型的转换，也不能用于自定义转换。</p>
]]></content>
    </entry>
</feed>